@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="@Url.Content("~/css/app.css")">

@section scripts {

    <script type="text/javascript">
        var streamUri = '@ViewBag.chatinformation.EventStreamUri';
        var queuename = '@ViewBag.client.queuename';
        var firstname = '@ViewBag.client.firstname';
        var lastname = '@ViewBag.client.lastname';
        var jwt = '@ViewBag.jwt';
        var token = '@ViewBag.token';
        var memberid = '@ViewBag.chatinformation.Member.Id';
        var host = '@ViewBag.host';
        var api = '@ViewBag.api';
        var chatInfoId = '@ViewBag.chatinformation.Id';
        var content_type = '@ViewBag.content_type';
        var tableid = '@ViewBag.tableid';

        var rowindex = '@ViewBag.newIndex';

        var agentname = '';
        var agentimageUrl = '';
        var agentid = '';



        window.onload = function () {
            @* // Get references to elements on the page. *@
            var form = document.getElementById('message-form');
            var messageField = document.getElementById('message');
            var messagesList = document.getElementById('messages');
            var socketStatus = document.getElementById('status');
            var closeBtn = document.getElementById('close');
            var clientid = '@ViewBag.chatinformation.Member.Id';

            var btnsend = document.getElementById("sendmessage");

            @* // Create a new WebSocket.  *@
            var socket = new WebSocket(streamUri);

            @* // Handle any errors that occur. *@
            socket.onerror = function (error) {
                console.log('WebSocket Error: ' + error);
            };

            @* // Show a connected message when the WebSocket is opened. *@
            socket.onopen = function(event) {
                @*socketStatus.innerHTML = 'Connected to: >' + event.currentTarget.URL + '<' + @ViewBag.client.queuename;*@
                socketStatus.innerHTML = 'Connected to ' + queuename;
                socketStatus.className = 'open';
            };

            @* // Handle messages sent by the server. *@
            socket.onmessage = function (event) {
                var message = event.data;
                var obj = JSON.parse(message);

                if (obj.topicName.includes('messages')) {
                    if (obj.eventBody.bodyType == 'member-join') {
                        console.log('Someone ' + obj.eventBody.sender.id + ' join the conversation');
                        GetAgentData(obj.eventBody.sender.id);
                    } else if (obj.eventBody.bodyType == 'member-leave' && obj.eventBody.sender.id == agentid) {
                        console.log('Someone leave the conversation');
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + agentname + ' left the conversation.</li>';
                    } else if (obj.eventBody.bodyType == 'standard' && obj.eventBody.sender.id != memberid) {
                        console.log('Someone write "' + obj.eventBody.body + '" in the conversation');
                        var today = new Date();
                        messagesList.innerHTML += '<li class="received" tabindex="-1"><img src="' + agentimageUrl + '"><span>' + agentname + ':</span>' + obj.eventBody.body
                            + '<p>' + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + '</p>'
                            + '</li>';
                    } else if (obj.eventBody.bodyType == "notice") {
                        console.log('Notice this ' + obj.eventBody.body);
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + obj.eventBody.body + '</li>';
                    } else if (obj.metadata.type == "typing-indicator") {
                        $('#typerDisplay').text('Agent is typing...');
                        $('.chat__typing').fadeIn(100, function () {
                            $('.chat__type__body').addClass('typing_display__open');
                        }).delay(1000).fadeOut(300, function () {
                            $('.chat__type__body').removeClass('typing_display__open');
                        });
                    }
                } else if (obj.topicName.includes('members')) {
                    if (obj.eventBody.member.state == 'DISCONNECTED') {
                        console.log(message);
                    }
                } else {
                    
                }

                @* // Go To the last Child *@
                $('#messages li:visible:last').focus();

            };

            @* // Show a disconnected message when the WebSocket is closed.  *@
            socket.onclose = function(event) {
                socketStatus.innerHTML = 'Disconnected from ' + queuename + '.';
                socketStatus.className = 'closed';

                messageField.disabled = true;
                btnsend.disabled = true;
                UpdateChatSession();
            };

            @* // Send a message when the form is submitted. *@
            form.onsubmit = function(e) {
                e.preventDefault();

                @* // Retrieve the message from the textarea. *@
                var message = messageField.value;

                @* // Send the message through the WebSocket *@
                socket.send(message);
                SendMessage(message);

                @* // Clear out the message field.
                messageField.value = ""; *@
                messageField.value = '';
                return false;
            };

            @* // Close the WebSocket connection when the close button is clicked. *@
            closeBtn.onclick = function(e) {
                e.preventDefault();
                @* // Close the WebSocket. *@
                EndSession();
                socket.close();
                return false;
            };
        };

        @* // OKA *@
        function SendMessage(messagetosend) {
            $.ajax({
                url: '/Chat/SendMessage',
                type: 'post',
                data: { messagetosend: messagetosend, chatInfoId: chatInfoId, MemberId: memberid, token: jwt },
                datatype: 'json',
                success: function (response) {
                    var obj = JSON.parse(response);
                    var messagesList = document.getElementById('messages');
                    var today = new Date();
                    messagesList.innerHTML += '<li class="sent" tabindex="-1"><img src="../content/clientimage.png"></i><span>' + firstname + " " + lastname + ':</span>' + obj.body
                        + '<p>' + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + '</p>'
                        + '</li>';
                    $('#messages li:visible:last').focus();
                }
            })
        }

        @* // OKA *@
        function GetAgentData(messageagentId) {
            $.ajax({
                url: '/Chat/GetAgentData',
                type: 'post',
                data: { chatInfoId: chatInfoId, agentId: messageagentId, token: jwt },
                datatype: 'json',
                success: function (response) {
                    var obj = JSON.parse(response);
                    console.log('GetAgentData' + response);
                    if (obj.length > 0) {
                        agentname = obj[0]
                        agentimageUrl = obj[1]
                        agentid = obj[2]
                        var messagesList = document.getElementById('messages');
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + agentname + ' join the conversation.</li>';
                    }
                }
            })
        }

        function GetConversationData() {
            $.ajax({
                url: '/Chat/GetAgentData',
                type: 'post',
                data: { chatInfoId: chatInfoId, agentId: messageagentId, token: jwt },
                datatype: 'json',
                success: function (response) {
                    var obj = JSON.parse(response);
                    console.log('GetAgentData' + response);
                    if (obj[0] != "") {
                        agentname = obj[0]
                        agentimageUrl = obj[1]
                        agentid = obj[2]
                    }
                }
            })
        }

        
        function EndSession() {
            $.ajax({
                url: '/Chat/EndSession',
                type: 'get',
                data: { chatInfoId: chatInfoId, MemberId: memberid, jwt : jwt, content_type : content_type, api : api, host : host },
                datatype: 'json'
            }).done(function () {

            })
        }

        function UpdateChatSession() {
            $.ajax({
                url: '/Chat/UpdateChatSession',
                type: 'get',
                data: { id: tableid, rowindex: rowindex, token: token, content_type : content_type, api : api, host : host },
                datatype: 'json'
            }).done()
        }

        function process(e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13 && !code.shiftKey) {
                //alert("Sending your Message : " + document.getElementById('message').value);
                $('form').submit();
            }
        }

    </script>


}

<!-- Chat Body -->
<div class="container-fluid general">
    <div class="row">
        <h1>Live Chat - 5Dimes</h1>
    </div>
    <div class="row">
        <div id="status">Connecting...</div>
    </div>
    <div class="row">
        <div id="chatmessages" class="col-xl-12">
            <ul id="messages"></ul>
        </div>
    </div>
    <div class="row">
        <form id="message-form" action="#" method="post" class="col-xl-12">
            <textarea id="message" placeholder="Write your message here..." onkeypress="process(event, this)" required></textarea>
            <button type="submit" id="sendmessage">Send Message</button>
            <button type="button" id="close">Close Chat</button>
        </form>
    </div>
    <div class="row">
        <div class="chat__typing">
            <span id="typerDisplay"></span>
        </div>
    </div>
</div>
