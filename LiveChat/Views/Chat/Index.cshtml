@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="@Url.Content("~/css/app.css")">


@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.debug.js"></script>

    <script type="text/javascript">
        var streamUri = '@ViewBag.chatinformation.EventStreamUri';
        var queuename = '@ViewBag.client.queuename';
        var firstname = '@ViewBag.client.firstname';
        var lastname = '@ViewBag.client.lastname';
        var displayqueue = '@ViewBag.displayqueue';

        var jwt = '@ViewBag.jwt';
        var token = '@ViewBag.token';

        var memberid = '@ViewBag.chatinformation.Member.Id';
        var chatInfoId = '@ViewBag.chatinformation.Id';

        var tableid = '@ViewBag.tableid';
        var rowindex = '@ViewBag.newIndex';

        var agentname = '';
        var agentimageUrl = '';
        var agentid = '';

        var participants = 1;

        window.onload = function () {
            @* // Get references to elements on the page. *@
            var form = document.getElementById('message-form');
            var messageField = document.getElementById('message');
            var messagesList = document.getElementById('messages');
            var socketStatus = document.getElementById('status');
            var closeBtn = document.getElementById('close');
            var transcriptBtn = document.getElementById('transcript');
            var clientid = '@ViewBag.chatinformation.Member.Id';

            var btnsend = document.getElementById('sendmessage');
            var btnclose = document.getElementById('close');
            var btntranscript = document.getElementById('transcript');

            @* // Create a new WebSocket.  *@
            var socket = new WebSocket(streamUri);

            @* // Handle any errors that occur. *@
            socket.onerror = function (error) {
                console.log('WebSocket Error: ' + error);
            };

            @* // Show a connected message when the WebSocket is opened. *@
            socket.onopen = function(event) {
                socketStatus.innerHTML = 'Connected to ' + displayqueue;
                socketStatus.className = 'open';
            };

            @* // Handle messages sent by the server. *@
            socket.onmessage = function (event) {
                var message = event.data;
                var obj = JSON.parse(message);

                if (obj.topicName.includes('messages')) {
                    if (obj.eventBody.bodyType == 'member-join') {
                        console.log('Someone ' + obj.eventBody.sender.id + ' join the conversation ' + chatInfoId);
                        GetAgentData(obj.eventBody.sender.id);
                    } else if (obj.eventBody.bodyType == 'member-leave' && obj.eventBody.sender.id == agentid) {
                        console.log('Someone leave the conversation ' + chatInfoId);
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + agentname + ' left the conversation.</li>';
                    } else if (obj.eventBody.bodyType == 'standard' && obj.eventBody.sender.id != memberid) {
                        var today = new Date();
                        messagesList.innerHTML += '<li class="received" tabindex="-1"><img src="' + agentimageUrl + '"><span>' + agentname + ':</span>' + obj.eventBody.body
                            + '<p>' + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + '</p>'
                            + '</li>';
                    } else if (obj.eventBody.bodyType == 'notice') {
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + obj.eventBody.body + '</li>';
                    } else if (obj.metadata.type == 'typing-indicator' && obj.eventBody.sender.id == agentid) {
                        $('.chat__typing').fadeIn(100, function () {
                            $('.chat__type__body').addClass('typing_display__open');
                        }).delay(250).fadeOut(200, function () {
                            $('.chat__type__body').removeClass('typing_display__open');
                        });

                    }
                    @* // Go To the last Child *@
                    $('#messages li:visible:last').focus();
                } else if (obj.topicName.includes('members')) {
                    if (obj.eventBody.member.state == 'DISCONNECTED') {
                        console.log('Someone ' + obj.eventBody.member.id + ' got a DISCONNECTED of conversation ' + chatInfoId);
                        GetConversationData();

                    }
                } else {
                    console.log('Participants ' + participants.toString());
                    if (participants < 1) {
                        socket.close();
                    }
                }
                @* // Go To the last Child *@
                $('#message').focus();
            };

            @* // Show a disconnected message when the WebSocket is closed.  *@
            socket.onclose = function(event) {
                socketStatus.innerHTML = 'Disconnected from ' + queuename + '.';
                socketStatus.className = 'closed';

                messageField.disabled = true;
                btnsend.disabled = true;
                btnclose.disabled = true;
                btntranscript.disabled = false;
                UpdateChatSession();
            };

            @* // Send a message when the form is submitted. *@
            form.onsubmit = function(e) {
                e.preventDefault();

                @* // Retrieve the message from the textarea. *@
                var message = messageField.value;

                @* // Send the message through the WebSocket *@
                socket.send(message);

                var messagesList = document.getElementById('messages');
                var today = new Date();
                messagesList.innerHTML += '<li class="sent" tabindex="-1"><img src="../content/clientimage.png"></i><span>' + firstname + " " + lastname + ':</span>' + message
                    + '<p>' + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + '</p>'
                    + '</li>';
                $('#messages li:visible:last').focus();
                document.getElementById('message').value = '';
                $('#message').focus();
                SendMessage(message);
                return false;
            };

            @* // Close the WebSocket connection when the close button is clicked. *@
            closeBtn.onclick = function(e) {
                e.preventDefault();
                @* // Close the WebSocket. *@
                EndSession();
                socket.close();
                return false;
            };

            transcriptBtn.onclick = function (e) {
                var messagesList = document.getElementById('messages');
                var items = messagesList.getElementsByTagName("li");
                var doc = new jsPDF();
                doc.setFontSize(22);
                doc.text(20, 20, "Chat Transcript for " + queuename);
                doc.setFontSize(16);
                doc.text(20, 30, "This belongs to: " + firstname + " " + lastname);
                for (var i = 0; i < items.length; ++i) {
                  // do something with items[i], which is a <li> element
                    var _items = items[i];
                    doc.text(20, 40 + i * 10, _items.innerText.replace(/(\r\n|\n|\r)/gm, " ") );
                }
                doc.save('transcript.pdf')
            };
        };

        @* // OKA *@
        function SendMessage(messagetosend) {
            $.ajax({
                url: '/Chat/SendMessage',
                type: 'post',
                data: { messagetosend: messagetosend, chatInfoId: chatInfoId, MemberId: memberid, token: jwt },
                datatype: 'json'
            })
        }

        @* // OKA *@
        function GetAgentData(messageagentId) {
            $.ajax({
                url: '/Chat/GetAgentData',
                type: 'post',
                data: { chatInfoId: chatInfoId, agentId: messageagentId, token: jwt },
                datatype: 'json',
                success: function (response) {
                    var obj = JSON.parse(response);
                    console.log('GetAgentData' + response);
                    if (obj.length > 0) {
                        agentname = obj[0]
                        agentimageUrl = obj[1]
                        agentid = obj[2]
                        var messagesList = document.getElementById('messages');
                        messagesList.innerHTML += '<li class="received" tabindex="-1">' + agentname + ' joined the conversation.</li>';
                    }
                }
            })
        }

        @* OK *@
        function SendTyping() {
            $.ajax({
                url: '/Chat/SendTyping',
                type: 'post',
                data: { chatInfoId: chatInfoId, memberId: memberid, token: jwt },
                datatype: 'json',
                success: function (response) {
                    console.log('SendTyping ' + response);
                    $('#message').focus();
                }
            })
        }

        @* Ok *@
        function GetConversationData() {
            $.ajax({
                url: '/Chat/GetConversationData',
                type: 'post',
                data: { chatInfoId: chatInfoId, token: jwt },
                datatype: 'json',
                success: function (response) {
                    var obj = JSON.parse(response);
                    participants = obj.total;
                    console.log('GetConversationData ' + response);

                }
            })
        }

        @* OK *@
        function EndSession() {
            $.ajax({
                url: '/Chat/EndSession',
                type: 'post',
                data: { chatInfoId: chatInfoId, MemberId: memberid, jwt: jwt},
                datatype: 'json',
                success: function (response) {
                    console.log('EndSession ' + response);
                }
            })
        }

        @* OK *@
        function UpdateChatSession() {
            $.ajax({
                url: '/Chat/UpdateChatSession',
                type: 'post',
                data: { id: tableid, rowindex: rowindex },
                datatype: 'json',
                success: function (response) {
                    console.log('UpdateChatSession ' + response);

                }
            })
        }

        function process(e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13 && !code.shiftKey) {
                $('form').submit();
                document.getElementById('message').value = '';
                $('#message').focus();
            } else if (code == 32 ) {
                SendTyping();
            }

        }

    </script>


}

<!-- Chat Body -->
<div class="container-fluid general">
    <div class="row">
        <h1>Live Chat - 5Dimes</h1>
    </div>
    <div class="row">
        <div id="status">Connecting...</div>
    </div>
    <div class="row">
        <div id="chatmessages" class="col-xl-12">
            <ul id="messages"></ul>
        </div>
    </div>
    <div class="row">
        <form id="message-form" name="message-form" action="#" method="post" class="col-xl-12" asp-antiforgery="false">
            <textarea id="message" name="message" onkeypress="process(event, this)" required></textarea>
            <button type="submit" id="sendmessage">Send Message</button>
            <button type="button" id="close">Close Chat</button>
            <button type="button" id="transcript">Transcript</button>
        </form>
    </div>
    <div class="row">
        <div class="chat__typing">
            <span id="typerDisplay">Agent is typing...</span>
        </div>
    </div>
</div>
